Git
1) Go to the project folder
2) run "git init"
3) This folder is now a git local repo, .git folder is created within
4) Then you can make changes here and then push
5) To send these changes to the github repo:
        git add .                     //tells git to note all changes
        git commit -am "Comments"     //Sorta like makes changes ready to implement with a comment to describe the changes
        git push origin               //Makes the actual changes to the github repo


Vagrant commands
1) create a directory where all the files will be
2) create a VagrantFile (the contents are unknown to me)
3) Then run the "vagrant up" command, this will create a server
4) Then run "vagrant ssh" command to connect to the dev runserver
5) within it there is a folder called vagrant "cd /vagrant", it didn't show up when i ran "ls"
6) within this, all the files, folder in the local computer within the project folder are duplicated in this folder
   Synced folder
7) So the idea is, you use atom to code on 'your pc' and vagrant immediately copies it onto 'dev server' then you log into dev server by going
   to the project folder and then typing vagrant ssh and in that terminal use "cd /vagrant" and there run "python manage.py runserver"


Intro API view
1) So rest_framework is handy, just extend the APIView class in a class within the views.py file.
2) Within that class define functions with names such as get, post, put etc...
3) If you get a GET http call to that particular class in the views.py with get request the get() in the class is executed, if POST http call comes
   then the post() method within the class get executed,if delete http request comes then delete() is executed and so on, that's all, pretty nifty


GET request:
1) pretty straightforward, you get a get request with a certain id or something and return an object which matches that id
2) The get() method starts executing in the selected class within the view, returns a "response" type object

POST request:
1) You have to create a serializer class extend the serializers.Serializer in that class.
2) If you expect a char field coming then you have to write
   name = serializers.CharField(max_length=10) #this ensures that you get a charfield and the length is <= 10
   Similarly for other fields if you have any
3) Then in the view, you have to assign variable to the serializer you created just for this, tho you made a class it has be written as:
   serializer_class = serializers.HelloSerializer
   notice no brackets
4) Then within the post function, you first validate the data in the HTTP request with:
   var2 = serializer_class.validated_data(request.data)
   var2 is a class type of HelloSerializer
5) If the data is validated then, send a response, if not raise some error



Intro to ViewSet
1) You need to create a class which extends the viewset.Viewset
2) Within it create the functions "create", "update", "list" etc... these are special functions
3) Now in the urls.py of the project, create a object of the DefaultRouter class, and use the register the url there
   my_router = DefaultRouter()
4) Then in the urls.py of the project, you have to do two things
      I) register the ViewSet in the my_router object using the method .register(), below is the line of code
            "router.register("helloViewset", views.HelloViewSet, base_name = "helloViewset")"
      II) Then include the router urls in the url_patterns array, like below
            "path('', include(router.urls))"
5) So how does the view set know which function to execute?
    retrieve() : executed when you give a primary key with the url, for example,
                 mysite.com/viewset/12
                 the number 12 will make the rest_framework execute the retrieve()
     list():     THis executed by default
                 mysite.com/viewset/
                 this will execute the list() method
     update():   So when you give a put request it does This
     destroy():  the delete http requests will give this


permissions.py
1) You create a permissions class which extends the permision.BasePermission class
2) But this has to be associated with some ViewSet
3) So every ViewSet comes inbuilt with a few tuples (probably from the parent classes), you add this to the viewset
